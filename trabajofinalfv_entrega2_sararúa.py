# -*- coding: utf-8 -*-
"""TrabajoFinalFV-Entrega2-SARARÚA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zqOOnqvJKQ_Q9lVnM1R5jDIF947LmK4W

<p><img alt="UdeA" height="150px" src="https://upload.wikimedia.org/wikipedia/commons/archive/f/fb/20161010213812%21Escudo-UdeA.svg" align="left" hspace="10px" vspace="0px"></p>
<img alt="CC" height="150px" src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Ingenier%C3%ADa_Industrial_UdeA.png/1026px-Ingenier%C3%ADa_Industrial_UdeA.png" align="right" hspace="0px" vspace="0px">
<br><br>
<p>
<h1><center><b>Trabajo Final<br>Algoritmia y Programación</b></center></h1>
<br><br>
<hr size=10 noshade color="green">
</p>
<p>
<img alt="CC" height="70px" src="https://mirrors.creativecommons.org/presskit/icons/by.xlarge.png" align="left" hspace="0px" vspace="0px">
<img alt="Attribution" height="70px" src="https://mirrors.creativecommons.org/presskit/icons/nc.xlarge.png" align="left" hspace="0px" vspace="0px">
<img alt="NC" height="70px" src="https://mirrors.creativecommons.org/presskit/icons/sa.xlarge.png" align="left" hspace="0px" vspace="0px">
<img alt="SA" height="70px" src="https://creativecommons.org//wp-content/themes/vocabulary-theme/vocabulary/svg/cc/icons/cc-icons.svg#cc-logo" align="left" hspace="0px" vspace="0px">
</p>

<div align="right">
<h2> <b> Por: Julián Andrés Castillo G. </b> </h2>
<a href="mailto:jandres.castillo@udea.edu.co"> ✉ Julian Andres Castillo Grisales </a>
</div>

<br>

**El presente curso hace parte de la Ingeniería Industrial de la Universidad de Antioquia.**

---

## **Descripción del problema a solucionar**

El programa a continuación genera en una carpeta especificada 1000 archivos de tipo Excel, Word, TXT, CSV, JSON, XML, PowerPoint, HTML y PNG en múltiples carpetas creadas todas de manera aleatoria.

El reto si decides aceptarlo es recorrer el árbol de carpetas e identificar los tipos de archivos, crear un nuevo directorio organizado y clasificarlos por tipo (mover los archivos), creando una carpeta llamada Excel para los archivos tipo Excel, una carpeta llamada Word para los archivos tipo Word y así sucesivamente para los demás tipos de archivos.

Los archivos en la nueva carpeta deben ser renombrados usando un consecutivo luego de ordenar los archivos por nombre, cada archivo debe comenzar por un numero de tres dígitos, por ejemplo, el primer archivo se nombrará “001-Nombre.extension”.

Adicionalmente debes guardar en un Pandas Dataframe el nombre del archivo anterior, nombre del archivo actual, la ruta anterior, la nueva ruta, el tipo de archivo, el tamaño en múltiples unidades de medida por columna usando las siguientes unidades, bit, byte, Kilobyte y Megabyte (crear una columna para cada tipo de unidad de medida). Adicionalmente en una columna detallar la cantidad de vocales que tiene el nombre del documento, en una columna detallar el número de consonantes que tiene el nombre del documento, la fecha de creación, la última fecha de modificación y por último la cantidad de archivos del mismo tipo en la carpeta de su mismo tipo.

Este programa debe guardar su procedimiento en un log de eventos (sea tan preciso como pueda) el log debe tener: fecha, hora, minuto, segundo y milisegundo un separador tabular, la instrucción a realizar, y el tiempo que demora en realizar esta operación. El Log debe tener de encabezado, el nombre del usuario que ejecuta el procedimiento, el sistema operativo, la plataforma y todas sus posibles descripciones, al final detallar la cantidad de procedimientos realizados y el tipo de acción, por ejemplo, contar archivos es una acción, mover es una segunda acción, renombrar es una acción etc.

El entregable debe ser un documento tipo reporte de software en donde se describan las siguientes especificaciones:

## **Documento de visión**

Proporciona una descripción general del software, sus objetivos y beneficios. Debe asignar un nombre al proyecto.

## **Especificación de requisitos**

Describe los requisitos funcionales y no funcionales del software.

## **Plan de proyecto**

Describe las actividades, el cronograma y el presupuesto del proyecto.

## **Plan de versionado**

Describe las versiones del software y su avance cada que se realice un procedimiento relevante en días desde el inicio hasta la entrega final.

## **Algoritmo**

Una carpeta con todos los archivos y código utilizados en el proyecto.

## **Integrantes**

En la carpeta del proyecto debe existir un archivo README.md en donde con Markdown detalle los nombres de los integrantes, programa al cual pertenece, una foto representativa del nombre del proyecto (no es una foto de los integrantes), la licencia con la cual registra el software.

## **GitHub**

El líder del equipo debe crear una cuenta en GitHub y cargar los documentos previamente detallados en la entrega (Lo necesario para cargar en GitHub será explicado en clase).

## **Entregas**

### Entrega 1: Para la primera entrega se debe enviar “Documento de visión”, “Especificación de requisitos”, “Plan de proyecto” y “Plan de versionado” --> 5 de octubre.
### Entrega 2: Para la segunda entrega (final) se deben enviar los cambios y sugerencias de la entrega 1 más “Algoritmo” y “GitHub”. Por definir
"""

!pip install openpyxl
!pip install tqdm
!pip install reportlab
!pip install python-docx
!pip install python-pptx
!pip install XlsxWriter
!pip install pandas
!pip install numpy
!pip install matplotlib
!pip install Pillow

import os
from openpyxl import Workbook
from docx import Document
import random as rnd
import pandas as pd
from PIL import Image, ImageDraw, ImageFont
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import time
import datetime
import warnings
warnings.filterwarnings('ignore')
import logging
import tqdm
from google.colab import files

inicio = time.time()
print('Ingresar la cantidad de archivos a procesar, ingresar solo numeros enteros.')
print('Si ingresa el numero 10, por ejemplo, se crearan 10 archivos de cada uno.')
print('Generando un total de 100 archivos, A continuacion ingresar el numero.')
archivos = int(input('Ingresar la cantidad: '))
hoy = datetime.date.today().strftime('%Y%m%d')
nombre_archivo_log = f"log_{hoy}.log"
logging.basicConfig(filename=nombre_archivo_log, level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logging.info("Iniciando el proceso, por CastilloEnterprises (^人^)(^人^)(^人^)")


#Creamos el directorio (carpeta) en donde se crearan los archivos
DirectorioActual = os.getcwd()
print(f'El directorio actual de trabajo es: \n\t--> {DirectorioActual}, \nEsta carpeta contendrá los archivos del trabajo final')
CarpetaNueva = "CarpetaArchivosTrabajoFinal"
os.makedirs(CarpetaNueva, exist_ok=True)
logging.info("Se crea el directorio {}".format(CarpetaNueva))
print(f"'{CarpetaNueva}' La carpeeta ha sido creada.")
# Nombre de la carpeta donde se crearán los archivos
carpeta = os.path.join(DirectorioActual, "CarpetaArchivosTrabajoFinal")
logging.info("La ruta de trabajo será {}".format(carpeta))
RutaNombres = r'https://raw.githubusercontent.com/juliancastillo-udea/Curso_AlgoritmosProgramacion/main/TrabajoFinal/NombresArgentina.csv'
logging.info("Cargando CSV con nombres")
dfNombres = pd.read_csv(RutaNombres, encoding='ISO-8859-1')
Nombres = dfNombres['name'].tolist()
logging.info("Reemplazando nombres y detalles del documento")
for i in tqdm.trange(len(Nombres)):
    if ' ' in Nombres[i]:
        Nombres[i]=Nombres[i].replace(' ', '_')
logging.info("Creacion de archivos")
for i in tqdm.trange(int(archivos), miniters=int(1), ascii=True,desc="Creando Archivos", dynamic_ncols=True):
    # Crear un archivo de Excel usando openpyxl--------------------------------
    logging.info(f"Creacion de archivos-->Excel {i+1}")
    wb = Workbook()
    ws = wb.active
    ws['A1'] = 'Hola soy un numero aleatorio'
    ws['A2'] = rnd.random()
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    excel_filename = os.path.join(carpeta, tempNombre+'.xlsx')
    wb.save(excel_filename)

    # Crear un archivo de Word usando python-docx------------------------------
    logging.info(f"Creacion de archivos-->Word {i+1}")
    doc = Document()
    doc.add_paragraph(f"¡Hola! Este es un archivo de Word creado desde Python. \n Soy un numero aleatorio {rnd.random()}")
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    word_filename = os.path.join(carpeta, tempNombre+'.docx')
    doc.save(word_filename)

    # Crear un archivo de texto (txt)------------------------------------------
    logging.info(f"Creacion de archivos-->Texto {i+1}")
    texto = f"¡Hola! Este es un archivo de Word creado desde Python. \n Soy un numero aleatorio {rnd.random()}"
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    txt_filename = os.path.join(carpeta, tempNombre+'.txt')
    with open(txt_filename, 'w') as txt_file:
        txt_file.write(texto)

    # Crear un archivo CSV-----------------------------------------------------
    logging.info(f"Creacion de archivos-->CSV {i+1}")
    csv_data = f"Nombre,Edad\n{rnd.choice(Nombres)},{rnd.uniform(18,60)}\n"
    csv_data += f"{rnd.choice(Nombres)},{rnd.uniform(18,60)}\n"
    csv_data += f"{rnd.choice(Nombres)},{rnd.uniform(18,60)}\n"
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    csv_filename = os.path.join(carpeta, tempNombre+'.csv')
    with open(csv_filename, 'w') as csv_file:
        csv_file.write(csv_data)

    # Crear un archivo JSON----------------------------------------------------
    logging.info(f"Creacion de archivos-->JSON {i+1}")
    import json
    json_data = {"nombre": rnd.choice(Nombres), "edad": rnd.uniform(18,60)}
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    json_filename = os.path.join(carpeta, tempNombre+'.json')
    with open(json_filename, 'w') as json_file:
        json.dump(json_data, json_file, indent=4)

    # Crear un archivo XML-----------------------------------------------------
    logging.info(f"Creacion de archivos-->XML {i+1}")
    xml_data = f"""<?xml version="1.0" encoding="UTF-8"?>
    <datos>
        <persona>
            <nombre>{rnd.choice(Nombres)}</nombre>
            <edad>{rnd.uniform(18,60)}</edad>
        </persona>
        <persona>
            <nombre>{rnd.choice(Nombres)}</nombre>
            <edad>{rnd.uniform(18,60)}</edad>
        </persona>
    </datos>
    """
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    xml_filename = os.path.join(carpeta, tempNombre+'.xml')
    with open(xml_filename, 'w') as xml_file:
        xml_file.write(xml_data)

    # Crear un archivo de PowerPoint-------------------------------------------
    logging.info(f"Creacion de archivos-->PowerPoint {i+1}")
    from pptx import Presentation
    ppt = Presentation()
    slide = ppt.slides.add_slide(ppt.slide_layouts[0])
    slide.shapes.title.text = f"Presentación creada desde Python,\n Soy un numero aleatorio {rnd.random()}"
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    ppt_filename = os.path.join(carpeta, tempNombre+'.pptx')
    ppt.save(ppt_filename)

    # Crear un archivo HTML----------------------------------------------------
    logging.info(f"Creacion de archivos-->HTML {i+1}")
    html_data = """<!DOCTYPE html>
    <html>
    <head>
        <title>Página HTML creada desde Python</title>
    </head>
    <body>
        <h1>Hola desde Python</h1>
        <h1>Hola soy un numero aleatorio {}</h1>
    </body>
    </html>
    """.format(rnd.random())
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    html_filename = os.path.join(carpeta, tempNombre+'.html')
    with open(html_filename, 'w') as html_file:
        html_file.write(html_data)

    #Crear una imagen vacía----------------------------------------------------
    logging.info(f"Creacion de archivos-->Imagen PNG {i+1}")
    ancho = 400
    alto = 400
    imagen_vacia = Image.new('RGB', (ancho, alto), 'white')
    texto = f"Hola soy un numero aleatorio\n {rnd.random()}"
    #fuente = ImageFont.truetype("arial.ttf", 20)
    dibujar = ImageDraw.Draw(imagen_vacia)
    bbox = dibujar.textbbox((0,0), texto)
    ancho_texto = bbox[2] - bbox[0]
    alto_texto = bbox[3] - bbox[1]
    x = (ancho - ancho_texto) / 2
    y = (alto - alto_texto) / 2
    dibujar.text((x, y), texto, fill="black")
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    imagen = os.path.join(carpeta, tempNombre+'.png')
    imagen_vacia.save(imagen)

    #Archivo PDF---------------------------------------------------------------
    logging.info(f"Creacion de archivos-->PDF {i+1}")
    tempNombre = rnd.choice(Nombres)
    Nombres.remove(tempNombre)
    pdfarchivo = os.path.join(carpeta, tempNombre+'.pdf')
    c = canvas.Canvas(pdfarchivo, pagesize=letter)
    width, height = letter
    texto = f"Hola soy un archivo PDF con un numero aleatorio \n {rnd.random()}"
    c.drawString(width/4 - 15, height/3, texto)  # Ajusta la posición según lo que necesites
    c.save()
logging.info("Proceso Terminado......")
logging.info("Gracias por usar Castillo Enterprises")
logging.shutdown()

fin = time.time()
tiempoejecucion = fin - inicio
minutos = int(tiempoejecucion // 60)
segundos = tiempoejecucion % 60
print(f"El script tomó {minutos} minutos y {segundos:.2f} segundos para ejecutarse.")

!zip -r /content/CarpetaArchivosTrabajoFinal.zip /content/CarpetaArchivosTrabajoFinal

files.download('/content/CarpetaArchivosTrabajoFinal.zip')
print('Archivos Descargados, favor revisar la carpeta de descargas')

#importaciones
import shutil
import datetime
from datetime import datetime as dt

#Directorio original
dir_path = r'/content/CarpetaArchivosTrabajoFinal'
res = []

#Poner los archivos en el directorio
for path in os.listdir(dir_path):
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)


directorio_princi = "Archivos ordenados"
carpetas = ["CarpetaExcel", "CarpetaDocx", "Carpetatxt", "CarpetaCSV", "CarpetaJSON", "CarpetaXML", "Carpetapptx", "CarpetaHTML", "CarpetaPNG", "CarpetaPDF"]
logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción:Se crea el nombre del directorio principal y el de las carpetas")


#Ruta del nuevo directorio para mover archivos
ruta_directorio_princi = os.path.join(os.getcwd(), directorio_princi)
#logging.info("La ruta del directorio principal será {}".format(ruta_directorio_princi))
logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: La ruta del directorio principal será {ruta_directorio_princi}")


os.makedirs(ruta_directorio_princi, exist_ok=True)
logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Se crea el directorio principal")


for carpeta in carpetas:
    ruta_carpeta = os.path.join(ruta_directorio_princi, carpeta)
    os.makedirs(ruta_carpeta, exist_ok=True)
    logging.info("")
    logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Se crean las carpetas con su respectiva ruta")

#********************************************************************************************************************************************************

#Division de los archivos en las carpetas segun extension

for archivosorg in res:
    nombre, extension = os.path.splitext(archivosorg)

    if extension[1:] == 'xlsx':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaExcel')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaExcel")

    elif extension[1:] == 'docx':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaDocx')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaDocx")

    elif extension[1:] == 'txt':
        carpetaMovimiento = os.path.join(directorio_princi, 'Carpetatxt')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a Carpetatxt")

    elif extension[1:] == 'csv':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaCSV')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaCSV")

    elif extension[1:] == 'json':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaJSON')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaJSON")

    elif extension[1:] == 'xml':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaXML')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaXML")

    elif extension[1:] == 'pptx':
        carpetaMovimiento = os.path.join(directorio_princi, 'Carpetapptx')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a Carpetapptx")

    elif extension[1:] == 'html':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaHTML')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaHTML")

    elif extension[1:] == 'png':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaPNG')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaPNG")

    elif extension[1:] == 'pdf':
        carpetaMovimiento = os.path.join(directorio_princi, 'CarpetaPDF')
        os.makedirs(carpetaMovimiento, exist_ok=True)
        shutil.move(os.path.join(dir_path, archivosorg), os.path.join(carpetaMovimiento, archivosorg))
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Mover archivos {archivosorg} a CarpetaPDF")

    else:
        print('Error')

#**************************************************************************************************************************************************
#Cambio de nombre de los archivos

carpetas = [carpeta for carpeta in os.listdir(ruta_directorio_princi) if os.path.isdir(os.path.join(ruta_directorio_princi, carpeta))]

data_list = []

for carpeta in carpetas:
    ruta_carpeta = os.path.join(ruta_directorio_princi, carpeta)
    archivos_carpeta = sorted(os.listdir(ruta_carpeta))
    logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: se organizan los archivos")

    for i, nombre_archivo in enumerate(archivos_carpeta, start=1):
        nuevo_nombre = f"{i:03d}-{nombre_archivo}"
        # Rutas antiguas y nuevas
        ruta_antigua = os.path.join(ruta_carpeta, nombre_archivo)
        ruta_nueva = os.path.join(ruta_carpeta, nuevo_nombre)
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: se cambia el nombre del archivo")

        # Renombrar el archivo
        os.rename(ruta_antigua, ruta_nueva)
        # Registrar el cambio en el log
        logging.info(f"Se renombró '{nombre_archivo}' a '{nuevo_nombre}' en '{ruta_carpeta}'")

        ##Crear las columnas para clasificar la información correspondiente
        columnasinfo =  ["Nombre anterior", "Nombre nuevo", "Ruta anterior", "Ruta nueva", "Tipo archivo","Tamaño en(bit)","Tamaño en(byte)", "Tamaño en(KB)", "Tamaño en(MB)", "Cant vocales", "Cant consonantes", "Fecha creación", "Fecha últ modif","Cant archivos por tipo" ]
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Creación columnas para Pandas Dataframe")

        ruta_antigua = os.path.join(ruta_carpeta, nombre_archivo)
        ruta_nueva = os.path.join(ruta_carpeta, nuevo_nombre)
        tipo_archivo = extension[1:]
        tamano_bits = os.path.getsize(ruta_nueva) * 8
        tamano_bytes = os.path.getsize(ruta_nueva)
        tamano_kb = tamano_bytes / 1024
        tamano_mb = tamano_kb / 1024
        cantidad_vocales = sum(1 for letra in nuevo_nombre if letra.lower() in 'aeiou')
        cantidad_consonantes = sum(1 for letra in nuevo_nombre if letra.isalpha() and letra.lower() not in 'aeiou')
        fecha_modificacion = dt.fromtimestamp(os.path.getctime(ruta_nueva)).strftime('%Y-%m-%d %H:%M:%S')
        fecha_creacion = dt.fromtimestamp(os.path.getmtime(ruta_nueva)).strftime('%Y-%m-%d %H:%M:%S')

        # Contar la cantidad de archivos del mismo tipo en la carpeta
        archivos_mismo_tipo = [arch for arch in os.listdir(carpetaMovimiento) if arch.endswith(f'.{tipo_archivo}')]
        cantidad_archivos_mismo_tipo = len(archivos_mismo_tipo)
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: se cuentan los archivos del mismo tipo")

        # Agregar la información al DataFrame
        data_list.append([nombre_archivo, nuevo_nombre, ruta_antigua, ruta_nueva, tipo_archivo,
                        tamano_bits, tamano_bytes, tamano_kb, tamano_mb,
                        cantidad_vocales, cantidad_consonantes, fecha_creacion, fecha_modificacion, cantidad_archivos_mismo_tipo])
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: se agrega la infromacion a las columnas")

        # Crear el DataFrame
        df = pd.DataFrame(data_list, columns=columnasinfo)
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Se crea el Pandas Dataframe")

        # Guardar el DataFrame en un archivo CSV
        df.to_csv('informacion_archivos.csv', index=False)
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Generacion de archivo CSV con información del Pandas Dataframe")

        excel_path = 'informacion_archivos.xlsx'
        df.to_excel(excel_path, index=False)
        logging.info(f"Usuario:Sara Isabel Rua\t Sistema operativo:Windows 10\tPlataforma: Google Colab\tAcción: Generacion de archivo xlsx con informacion del Pandas Dataframe")